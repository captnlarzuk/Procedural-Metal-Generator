
!function(n){"use strict";function t(n,t){var r=(65535&n)+(65535&t),e=(n>>16)+(t>>16)+(r>>16);return e<<16|65535&r}function r(n,t){return n<<t|n>>>32-t}function e(n,e,o,u,c,f){return t(r(t(t(e,n),t(u,f)),c),o)}function o(n,t,r,o,u,c,f){return e(t&r|~t&o,n,t,u,c,f)}function u(n,t,r,o,u,c,f){return e(t&o|r&~o,n,t,u,c,f)}function c(n,t,r,o,u,c,f){return e(t^r^o,n,t,u,c,f)}function f(n,t,r,o,u,c,f){return e(r^(t|~o),n,t,u,c,f)}function i(n,r){n[r>>5]|=128<<r%32,n[(r+64>>>9<<4)+14]=r;var e,i,a,h,d,l=1732584193,g=-271733879,v=-1732584194,m=271733878;for(e=0;e<n.length;e+=16)i=l,a=g,h=v,d=m,l=o(l,g,v,m,n[e],7,-680876936),m=o(m,l,g,v,n[e+1],12,-389564586),v=o(v,m,l,g,n[e+2],17,606105819),g=o(g,v,m,l,n[e+3],22,-1044525330),l=o(l,g,v,m,n[e+4],7,-176418897),m=o(m,l,g,v,n[e+5],12,1200080426),v=o(v,m,l,g,n[e+6],17,-1473231341),g=o(g,v,m,l,n[e+7],22,-45705983),l=o(l,g,v,m,n[e+8],7,1770035416),m=o(m,l,g,v,n[e+9],12,-1958414417),v=o(v,m,l,g,n[e+10],17,-42063),g=o(g,v,m,l,n[e+11],22,-1990404162),l=o(l,g,v,m,n[e+12],7,1804603682),m=o(m,l,g,v,n[e+13],12,-40341101),v=o(v,m,l,g,n[e+14],17,-1502002290),g=o(g,v,m,l,n[e+15],22,1236535329),l=u(l,g,v,m,n[e+1],5,-165796510),m=u(m,l,g,v,n[e+6],9,-1069501632),v=u(v,m,l,g,n[e+11],14,643717713),g=u(g,v,m,l,n[e],20,-373897302),l=u(l,g,v,m,n[e+5],5,-701558691),m=u(m,l,g,v,n[e+10],9,38016083),v=u(v,m,l,g,n[e+15],14,-660478335),g=u(g,v,m,l,n[e+4],20,-405537848),l=u(l,g,v,m,n[e+9],5,568446438),m=u(m,l,g,v,n[e+14],9,-1019803690),v=u(v,m,l,g,n[e+3],14,-187363961),g=u(g,v,m,l,n[e+8],20,1163531501),l=u(l,g,v,m,n[e+13],5,-1444681467),m=u(m,l,g,v,n[e+2],9,-51403784),v=u(v,m,l,g,n[e+7],14,1735328473),g=u(g,v,m,l,n[e+12],20,-1926607734),l=c(l,g,v,m,n[e+5],4,-378558),m=c(m,l,g,v,n[e+8],11,-2022574463),v=c(v,m,l,g,n[e+11],16,1839030562),g=c(g,v,m,l,n[e+14],23,-35309556),l=c(l,g,v,m,n[e+1],4,-1530992060),m=c(m,l,g,v,n[e+4],11,1272893353),v=c(v,m,l,g,n[e+7],16,-155497632),g=c(g,v,m,l,n[e+10],23,-1094730640),l=c(l,g,v,m,n[e+13],4,681279174),m=c(m,l,g,v,n[e],11,-358537222),v=c(v,m,l,g,n[e+3],16,-722521979),g=c(g,v,m,l,n[e+6],23,76029189),l=c(l,g,v,m,n[e+9],4,-640364487),m=c(m,l,g,v,n[e+12],11,-421815835),v=c(v,m,l,g,n[e+15],16,530742520),g=c(g,v,m,l,n[e+2],23,-995338651),l=f(l,g,v,m,n[e],6,-198630844),m=f(m,l,g,v,n[e+7],10,1126891415),v=f(v,m,l,g,n[e+14],15,-1416354905),g=f(g,v,m,l,n[e+5],21,-57434055),l=f(l,g,v,m,n[e+12],6,1700485571),m=f(m,l,g,v,n[e+3],10,-1894986606),v=f(v,m,l,g,n[e+10],15,-1051523),g=f(g,v,m,l,n[e+1],21,-2054922799),l=f(l,g,v,m,n[e+8],6,1873313359),m=f(m,l,g,v,n[e+15],10,-30611744),v=f(v,m,l,g,n[e+6],15,-1560198380),g=f(g,v,m,l,n[e+13],21,1309151649),l=f(l,g,v,m,n[e+4],6,-145523070),m=f(m,l,g,v,n[e+11],10,-1120210379),v=f(v,m,l,g,n[e+2],15,718787259),g=f(g,v,m,l,n[e+9],21,-343485551),l=t(l,i),g=t(g,a),v=t(v,h),m=t(m,d);return[l,g,v,m]}function a(n){var t,r="",e=32*n.length;for(t=0;t<e;t+=8)r+=String.fromCharCode(n[t>>5]>>>t%32&255);return r}function h(n){var t,r=[];for(r[(n.length>>2)-1]=void 0,t=0;t<r.length;t+=1)r[t]=0;var e=8*n.length;for(t=0;t<e;t+=8)r[t>>5]|=(255&n.charCodeAt(t/8))<<t%32;return r}function d(n){return a(i(h(n),8*n.length))}function l(n,t){var r,e,o=h(n),u=[],c=[];for(u[15]=c[15]=void 0,o.length>16&&(o=i(o,8*n.length)),r=0;r<16;r+=1)u[r]=909522486^o[r],c[r]=1549556828^o[r];return e=i(u.concat(h(t)),512+8*t.length),a(i(c.concat(e),640))}function g(n){var t,r,e="0123456789abcdef",o="";for(r=0;r<n.length;r+=1)t=n.charCodeAt(r),o+=e.charAt(t>>>4&15)+e.charAt(15&t);return o}function v(n){return unescape(encodeURIComponent(n))}function m(n){return d(v(n))}function p(n){return g(m(n))}function s(n,t){return l(v(n),v(t))}function C(n,t){return g(s(n,t))}function A(n,t,r){return t?r?s(t,n):C(t,n):r?m(n):p(n)}"function"==typeof define&&define.amd?define(function(){return A}):"object"==typeof module&&module.exports?module.exports=A:n.md5=A}(this);
//# sourceMappingURL=md5.min.js.map
;
var NOTECONF = {
  "o": 25,
  " ": 0
}

var NOTE_ = function(desc){
  this.fileName = desc.fileName;
  this.octave = desc.octave;
  this.offset = desc.octave;
  this.volume = desc.volume;
  this.time = NOTECONF.o;

  this.soundFile = document.createElement("audio");
  this.soundFile.preload = "auto";

  //Load the sound file (using a source element for expandability)
  var src = document.createElement("source");
  src.src = this.fileName + ".wav";
  this.soundFile.appendChild(src);
  this.soundFile.addEventListener("onended", function(){
    document.removeChild(this);
  });
  this.soundFile.load();
  this.soundFile.volume = this.volume;
  this.soundFile.play();

  this.play = function(){
    let soundFile = this.soundFile;
    soundFile.currentTime = 0.00;
    setTimeout(function() { soundFile.play()}, 0);
  }
}

;
var wavFolder = "wav/";

var PSC;
var PROCEDURAL_SEED_COMPUTER_ = function(seed){
  this.seed = seed;
  this.hash = md5(seed);
  this.hashByteLength = 2;

  this.offset = 0;
  this.initWith = function(seed){
    this.seed = seed;
    this.hash = md5(seed);
    this.offset = 0;
  }

  this.getRecipeFrom = function(from)
  {
    var hashByte = this.getHashByte();
    var index = parseInt(hashByte, 16);
    //console.log(hashByte + " " + index + " " + (index%from.length));
    if(Array.isArray(from))
    return from[index%from.length];
    var keys = Object.keys(from);
    return from[keys[ index%keys.length]];
  };
  this.getRecipeIndex = function(){
    var hashByte = this.getHashByte();
    return parseInt(hashByte, 16);
  };
  this.getHashByte = function()
  {
    var hashByte = this.hash.slice(this.offset, this.offset+(this.hashByteLength));
    this.nextHashByte();
    return hashByte;
  };

  this.nextHashByte = function()
  {
    this.offset += this.hashByteLength;

    if((this.offset+(this.hashByteLength))>this.hash.length)
    {
      this.offset = 0;
    }
  };

  return this;
};

var PSC =  new PROCEDURAL_SEED_COMPUTER_();
var PMG_BASEINSTRUMENTS = {
  drumA: {
    o:   wavFolder+"Dry-Kick",
    "-": wavFolder+"Closed-Hi-Hat-6",
    x:   wavFolder+"Korg-NS5R-Snare-Drum"
  },
  chrugs: {
    aa:wavFolder+"grattea/HMRhyB Chug-A",
    ab:wavFolder+"grattea/HMRhyB Chug-B",
    ac:wavFolder+"grattea/HMRhyB Chug-C",
    ad:wavFolder+"grattea/HMRhyB Chug-D Lo",
    ae:wavFolder+"grattea/HMRhyB Chug-E",
    af:wavFolder+"grattea/HMRhyB Chug-F",
    ag:wavFolder+"grattea/HMRhyB Chug-G",
    ba:wavFolder+"gratteb/HMRhyBChug-A",
    bb:wavFolder+"gratteb/HMRhyBChug-B",
    bc:wavFolder+"gratteb/HMRhyBChug-C",
    bd:wavFolder+"gratteb/HMRhyBChug-D",
    be:wavFolder+"gratteb/HMRhyBChug-E Lo",
    bf:wavFolder+"gratteb/HMRhyBChug-F",
    bg:wavFolder+"gratteb/HMRhyBChug-G",
  },
  symbals:{
    1:  wavFolder+"symbals/1_hit_symbal",
    2:  wavFolder+"symbals/2_hit_symbal",
    3:  wavFolder+"symbals/3_hit_symbal",
    4:  wavFolder+"symbals/4_hit_symbal",
    5:  wavFolder+"symbals/5_hit_symbal",
    6:  wavFolder+"symbals/6_hit_symbal",
    7:  wavFolder+"symbals/7_hit_symbal",
    8:  wavFolder+"symbals/8_hit_symbal",
    9:  wavFolder+"symbals/9_hit_symbal",
    10: wavFolder+"symbals/10_hit_symbal",
    11: wavFolder+"symbals/11_hit_symbal",
  }
}
var PMG_BASEPATTERNS = {
  "drumA":[
    ["o", "o", "x", " "],
    ["o", "o", "o", " "],
    ["o", "o", "o", "o"],
    ["x", " ", " ", " "],
    ["x", "o", " ", "o"],
    ["x", "x", "x", "o"],
    ["o", " ", "x", " "],
    [" ", " ", "o", "o"],
    [" ", " ", "x", "x"],
    ["x", "x", "x", "x"],
    ["o", " ", " ", " "],
    [" ", " ", " ", " "],
  ],
  "chrugs":[
    ["aa", " ", " ", " "],
    ["ab", " ", " ", " "],
    ["ac", " ", " ", " "],
    ["ad", " ", " ", " "],
    ["ae", " ", " ", " "],
    //  ["af", " ", " ", " "],
    [" ", " ", " ", " "],
    ["ba", " ", " ", " "],
    ["bb", " ", " ", " "],
    ["bc", " ", " ", " "],
    ["bd", " ", " ", " "],
    ["be", " ", " ", " "],
    ["bf", " ", " ", " "],
    ["aa", " ","aa", " "],
    ["ab", " ","ab", " "],
    ["ac", " ","ac", " "],
    ["ad", " ","ad", " "],
    ["ae", " ","ae", " "],
    ["af", " ","af", " "],
    [" ", " ", " ", " "],
    ["ba", " ","ba", " "],
    ["bb", " ","bb", " "],
    ["bc", " ","bc", " "],
    ["bd", " ","bd", " "],
    ["be", " ","be", " "],
    ["bf", " ","bf", " "],
    [" "," ", "aa",  " "],
    [" "," ", "ab",  " "],
    [" "," ", "ac",  " "],
    [" "," ", "ad",  " "],
    [" "," ", "ae",  " "],
    //  [" "," ", "af",  " "],
    [" ", " ", " ", " "],
    [ " "," ", "ba", " "],
    [ " "," ", "bb", " "],
    [ " "," ", "bc", " "],
    [ " "," ", "bd", " "],
    [ " "," ", "be", " "],
    [ " "," ", "bf", " "],
  ],
  symbals:[ ],
  "getABCD": function(base_pattern){
    var pattern = [
      PSC.getRecipeFrom(base_pattern),
      PSC.getRecipeFrom(base_pattern),
      PSC.getRecipeFrom(base_pattern),
      PSC.getRecipeFrom(base_pattern)
    ];
    console.log("------");
    console.log(base_pattern);
    return pattern;
  }
}



var PMG_STRUCTURES = {
  "ABBA":function(structures, offset){
    if(!structures || structures.length < 4)
    return null;
    return [structures[(offset+0)%3], structures[(offset+1)%3], structures[(offset+1)%3], structures[(offset+0)%3] ];
  },
  "ABBAABBA":function(structures, offset){
    if(!structures || structures.length < 4)
    return null;
    return [structures[(offset+0)%3], structures[(offset+1)%3], structures[(offset+1)%3], structures[(offset+0)%3],structures[(offset+0)%3], structures[(offset+1)%3], structures[(offset+1)%3], structures[(offset+0)%3] ];
  },
  "ABAB":function(structures, offset){
    if(!structures || structures.length < 4)
    return null;
    return [structures[(offset+0)%3], structures[(offset+1)%3], structures[(offset+0)%3], structures[(offset+1)%3] ];
  },
  /*  "ABCD":function(structures){
  if(!structures || structures.length < 4)
  return null;
  return [structures[0], structures[1], structures[2], structures[3] ];
},
"ABCA":function(structures){
if(!structures || structures.length < 4)
return null;
return [structures[0], structures[1], structures[2], structures[0] ];
},*/
"ABCB":function(structures, offset){
  if(!structures || structures.length < 4)
  return null;
  return [structures[(offset+0)%3], structures[(offset+1)%3], structures[(offset+2)%3], structures[(offset+1)%3] ];
},
"ABCC":function(structures, offset){
  if(!structures || structures.length < 4)
  return null;
  return [structures[(offset+0)%3], structures[(offset+1)%3], structures[(offset+2)%3], structures[(offset+3)%3] ];
},
"ABCCCCBA":function(structures, offset){
  if(!structures || structures.length < 4)
  return null;
  return [structures[(offset+0)%3], structures[(offset+1)%3], structures[(offset+2)%3], structures[(offset+3)%3],structures[(offset+3)%3], structures[(offset+3)%3], structures[(offset+2)%1], structures[(offset+0)%3] ];
},
"AABB":function(structures, offset){
  if(!structures || structures.length < 4)
  return null;
  return [structures[(offset+0)%3], structures[(offset+0)%3], structures[(offset+1)%3], structures[(offset+1)%3] ];
},
};

var PMG_STRUCTURE_SET = function(base_patterns){
  this.entropySet = [4,5,6,7,8];
  this.repeatSet = [2,3,4];
  this.entropy = PSC.getRecipeFrom(this.entropySet);
  this.repeat = PSC.getRecipeFrom(this.repeatSet);
  this.base_patterns = base_patterns;
  this.structureKit = [];
  this.structureSet = [];
  this.offset = 0;

  this.getInfoDump = function(){
    return {
      "config":{
        "entropy": this.entropy,
        "repeat": this.repeat,
        "offset": this.offset,
      },
    };
  }
  /*
  Return a structure kit ( structure makerz callbacks )
  */
  this.createStructureKit = function()
  {
    this.repeat = PSC.getRecipeFrom(this.repeatSet);
    this.structureKit = [];
    for(var i = 0; i <= this.entropy; i++)
    {
      var structurecall = PSC.getRecipeFrom(PMG_STRUCTURES);
      this.structureKit.push(structurecall)
    }

    return this;
  }

  /*
  Returns a structure set ( x arrays of patterns arranged in structures)
  */
  this.createStructureSet = function(patternsABCD)
  {
    this.structureSet = [];
    //console.log(patternsABCD)
    for(var i = 0; i <= this.entropy; i++)
    {
      var structurecallA = this.structureKit[i];
      //var structurecallB = this.structureKit[i];
      var pattern = structurecallA(patternsABCD,PSC.getRecipeIndex()%3);//+structurecallB(patternsABCD);

      this.structureSet.push(pattern);
    }
    return this;
  }

  this.getNextPattern = function()
  {
    return this.structureSet[this.offset++%this.structureSet.length]
  }

  this.getPattern = function()
  {
    return this.structureSet[this.offset];
  }
  this.reinit = function(){
    this.createStructureKit().createStructureSet(PMG_BASEPATTERNS.getABCD(this.base_patterns));
    this.offset = 0;
  }

  this.createStructureKit().createStructureSet(PMG_BASEPATTERNS.getABCD(this.base_patterns));
  return this
};
/*var PMG_PATTERN_ = function(){
this.structure = new PMG_STRUCTURE_SET(this.patterns.drum);
this.pattern = 0;

}*/
var PMG_TRACK_ = function(name, vol,  instrument, structure){
  this.name = name;
  this.changed = 0;
  this.instrument = instrument;
  this.structureRepeatSet = [2, 4, 8];
  this.structureRepeat =
  this.structure = structure;
  this.currentTime = 0;
  this.offset = 0;
  this.note = null;
  this.vol = vol;
  this.pattern = this.structure.getPattern();
  this.patternCount = 0;
  this.step = function(){
    this.currentTime++;

    if(!this.pattern)
    return false;

    this.offset = this.currentTime%(CONFIG.bpb);
    if(!this.offset)
      this.patternCount++;
    if(this.patternCount > this.structure.repeat * 4)
    {
      console.log("STEP " + this.name + this.changed  ) ;
      this.changed ++;
      this.pattern = this.structure.getNextPattern();
      this.currentTime = 0;
      this.patternCount = 0;
    }

    var pat = this.pattern[this.patternCount%this.pattern.length];
    if(typeof pat == "undefined")
    {
      console.log(this.name + "shit" + this.offset + " - " + this.patternCount)
      console.log(this.pattern);
      this.currentTime = 0;
      return 0;
    }

    if(pat[this.offset] && pat[this.offset]!==" " )
    {
      if((typeof this.instrument[pat[this.offset]] == "undefined"))
      {
        console.log(pat[this.offset]+" makes no sense.");
      }
      else
      {
        this.note = new NOTE_({fileName:this.instrument[pat[this.offset]], volume: this.vol});
        this.note.play(pat[this.offset]);
      }
    }

  };
  this.getInfoDump = function(){
    return {
      "name": this.name,
      "config":{
        "currentTime": this.currentTime,
        "patternCount": this.patternCount%this.pattern.length,
        "offset": this.offset,
        "vol": this.vol,
      },
      "structureInfo": this.structure.getInfoDump(),
      "pattern":this.pattern,
    };
  };

  return this;
}


var PROCEDURAL_METAL_GENERATOR_ = function(seed){

  this.PSC = PSC;
  this.PSC.initWith(seed);
  this.bpmSet = CONFIG.bpmSet;
  this.bpm = PSC.getRecipeFrom(this.bpmSet);
  this.timer =  60000 / (this.bpm * 8);
  this.offset = 0;
  this.currentPattern = 0;
  this.play = true;
  this.tracksInfo = [];

  for( var li = 1; li < 11; li++)
  {
    PMG_BASEPATTERNS.symbals.push([li+"", " ", " ", " "]);
    PMG_BASEPATTERNS.symbals.push([" ", " ", li+"", " "]);
    PMG_BASEPATTERNS.symbals.push([li+"", " ", li+"", " "]);
  }
  var nopat = [" ", " ", " ", " "];
  PMG_BASEINSTRUMENTS.symbals["o"]= wavFolder+"Dry-Kick";
  PMG_BASEINSTRUMENTS.symbals["-"]= wavFolder+"Closed-Hi-Hat-6";
  PMG_BASEINSTRUMENTS.symbals["x"]= wavFolder+"Korg-NS5R-Snare-Drum";
  PMG_BASEPATTERNS.symbals.push(["x", " ", "o", " "]);
  PMG_BASEPATTERNS.symbals.push(["o", " ", "x", " "]);
  PMG_BASEPATTERNS.symbals.push(["x", " ", " ", " "]);
  PMG_BASEPATTERNS.symbals.push(["o", " ", " ", " "]);
  PMG_BASEPATTERNS.symbals.push([" ", " ", "x", " "]);
  PMG_BASEPATTERNS.symbals.push([" ", " ", "o", " "]);
  PMG_BASEPATTERNS.symbals.push(nopat);

  this.patterns= {
    drum: PMG_BASEPATTERNS.drumA,
    chrugs:PMG_BASEPATTERNS.chrugs,
    symbals: PMG_BASEPATTERNS.symbals
  };

  this.tracks = [
    new PMG_TRACK_("DRUMS",1, PMG_BASEINSTRUMENTS.drumA, new PMG_STRUCTURE_SET(this.patterns.drum)),
    new PMG_TRACK_("CHRUGS",0.8, PMG_BASEINSTRUMENTS.chrugs, new PMG_STRUCTURE_SET(this.patterns.chrugs)),
    new PMG_TRACK_("SYMBALS",1, PMG_BASEINSTRUMENTS.symbals, new PMG_STRUCTURE_SET(this.patterns.symbals)),
  ];
  //this.structures =
  this.step = function(timer){
    if(this.play)
    for (var i = 0; i< this.tracks.length; i++)
    {
      this.tracks[i].step();
    }
  }

  this.getInfoDump = function(){
    for(var i in this.tracks)
    this.tracksInfo[i] = this.tracks[i].getInfoDump();
    //var tracks =
    return {

      "config":{
        "seed": this.PSC.seed,
        "hash": this.PSC.hash,
        "bpm": this.bpm,
      },
      "track":this.tracksInfo,

    };
  }
  return this;
};

;
var CONFIG = {
  bpb: 4,
  bpmSet: [80, 110, 120, 140 ]
}

function draw_pattern( pattern, count, offset){
  var str = "<div class='pattern'>";
  var playing = " playing"
  var cssclass = ""
  for(var k = 0; k<= pattern.length; k ++)
  {
    if(!(k%4))
      str += "<br />";
    if(typeof pattern[k] !== "undefined")
    for(var l = 0; l< pattern[k].length; l ++)
    {
      cssclass = (count == k && offset == l)?playing:"";
      if((pattern[k][l]==" "))
      str += "<span class='pattern_square pattern_square_empty"+cssclass+"'> </span>";
      else
      str += "<span class='pattern_square pattern_square_full"+cssclass+"'>"+pattern[k][l]+"</span>";
    }
    str += "<br />"
  }
  str +=   "</div>";
  return str;
}

function createSeed(){
  return md5(Math.random());
}
var PMG = new PROCEDURAL_METAL_GENERATOR_(document.getElementById('seedInput').value)  ;
function showInfo()
{
  var str = "<div class='Info'>";
  var info = PMG.getInfoDump();
  var tracks = info.track;
  str += "<h2> Now playing: </h2>"
  + "<ul>"
  + "<li>Seed : " + info.config.seed + "</li>"
  + "<li>Bpm : " + info.config.bpm + "</li>"
  + "</ul>"
  for(i in tracks)
  {
    str += showTrackInfo(tracks[i]);
    str += draw_pattern(tracks[i].pattern,tracks[i].config.patternCount, tracks[i].config.offset );
  }
  str += "</div>";
  return str;
}
function showTrackInfo(track){
  var str = "<div class='trackInfo'>";
  str += "<h2>"+track.name+"</h2>"
  +"<ul>"
  + "<li> BEAT "+track.config.offset+"/"+track.config.patternCount+"</li>"
  + "<li> entropy "+track.structureInfo.config.entropy+"</li>"
  + "<li> repeat "+track.structureInfo.config.repeat+"</li>"
  + "<li> offset "+track.structureInfo.config.offset+"</li>"
  +"</ul>";
  str += "</div>";
  return str;
}
function showPatternInfo()
{

}

function start(){
  setTimeout(start, PMG.timer);
  var info = PMG.getInfoDump();
  document.getElementById('show').innerHTML = showInfo();

/*  + "<pre>"+JSON.stringify(info.config, null, "\t")+"</pre>"
  + "<pre>"+JSON.stringify(info.track[0].config, null, "\t")+"</pre>"
  + "<pre>"+JSON.stringify(info.track[0].structureInfo.config, null, "\t")+"</pre>"
  + "<pre>"+JSON.stringify(info.track[1].config, null, "\t")+"</pre>"
  + "<pre>"+JSON.stringify(info.track[1].structureInfo.config, null, "\t")+"</pre>"
  + "<pre>"+JSON.stringify(info.track[2].config, null, "\t")+"</pre>";
  + "<pre>"+JSON.stringify(info.track[2].structureInfo.config, null, "\t")+"</pre>"*/
   PMG.step();
}

;
